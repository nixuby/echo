generator client {
    provider = "prisma-client-js"
    output   = "../../generated/prisma"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model User {
    id String @id @default(uuid())

    // Unique email address, not required
    // Used for resetting the password
    email String?

    // Whether the email is verified
    isEmailVerified Boolean @default(false)

    // Timestamp for when the email was verified
    // Note: if not verified, this marks when the verification email was sent.
    emailVerifiedAt DateTime?

    // Unique user name for login
    username String @unique

    // Non-unique display user name
    name String?

    bio String @default("")

    // Auth provider (local | google | apple)
    provider String @default("local")

    // Unique identifier for the provider
    providerId String?

    // Password hash for local users
    password String?

    // Timestamp for when the user was created
    createdAt DateTime @default(now())

    // Timestamp for when the user was last updated
    updatedAt DateTime @updatedAt

    posts     Post[]
    postLikes PostLike[]

    isVerified Boolean @default(false)

    notificationSettings String         @default("{}") // JSON string for notification settings
    notifications        Notification[]

    following UserFollow[] @relation("UserFollows")
    followers UserFollow[] @relation("UserFollowers")

    chats    ChatParticipant[]
    messages ChatMessage[]

    @@unique([provider, providerId])
}

enum PostType {
    ORIGINAL
    REPLY
    REPOST
}

model Post {
    id          String           @id @default(uuid())
    type        PostType         @default(ORIGINAL)
    content     String           @default("")
    author      User             @relation(fields: [userId], references: [id])
    userId      String
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    deletedAt   DateTime? // Soft delete timestamp
    likes       PostLike[]
    likeCount   Int              @default(0)
    replyCount  Int              @default(0)
    repostCount Int              @default(0)
    parent      Post?            @relation("PostToPost", fields: [parentId], references: [id], onDelete: SetNull)
    children    Post[]           @relation("PostToPost")
    parentId    String?
    attachments PostAttachment[]

    @@index([parentId])
}

model PostLike {
    id        String   @id @default(uuid())
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())

    @@unique([postId, userId])
}

model PostAttachment {
    id        String   @id @default(uuid()) // URL is based on the id
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    type      String // MIME type
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Notification {
    id        String   @id @default(uuid())
    type      String // Identifier for the type of notification
    data      String // JSON data for the notification
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    isRead    Boolean  @default(false)
    createdAt DateTime @default(now())
}

model UserFollow {
    id         String   @id @default(uuid())
    follower   User     @relation("UserFollows", fields: [followerId], references: [id])
    followerId String
    follows    User     @relation("UserFollowers", fields: [followsId], references: [id])
    followsId  String
    createdAt  DateTime @default(now())

    @@unique([followerId, followsId])
}

model Chat {
    id           String            @id @default(uuid())
    createdAt    DateTime          @default(now())
    participants ChatParticipant[]
    messages     ChatMessage[]
}

model ChatParticipant {
    id     String @id @default(uuid())
    chat   Chat   @relation(fields: [chatId], references: [id])
    chatId String
    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@unique([chatId, userId])
}

model ChatMessage {
    id        String   @id @default(uuid())
    chat      Chat     @relation(fields: [chatId], references: [id])
    chatId    String
    sender    User     @relation(fields: [senderId], references: [id])
    senderId  String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
